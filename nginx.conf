                                                                                                                                                                                                                          worker_processes 1;
daemon off;

error_log <%= ENV["APP_ROOT"] %>/nginx/logs/error.log;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log <%= ENV["APP_ROOT"] %>/nginx/logs/access.log cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  sendfile on;

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gunzip on;
  gzip_static always;
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;
  gzip_vary on;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - <%= ENV["PORT"] %>
  server_tokens off;

  # Increase the bucket size to store the map variable
  map_hash_bucket_size 128;

  # Maximum size for file upload
  client_max_body_size 6m;

  map $host $baseRootDir {
      default  <%= ENV["APP_ROOT"] %>/public;
    }

  map $host $multiTenantDir {
      default     $baseRootDir/multitenancy;
  }

  map $http_host $phuDir {

    hostnames;

    default    /404/;
    xxsupportphu1.*     $baseRootDir/phu/; # QA PHU as per MoH Request
    aph.*               $multiTenantDir/aph/;
    bchu.*              $multiTenantDir/bchu/;
    ckphu.*             $multiTenantDir/ckphu/;
    drhd.*              $multiTenantDir/drhd/;
    eohu.*              $multiTenantDir/eohu/;
    esthu.*             $multiTenantDir/esthu/;
    gbhu.*              $multiTenantDir/gbhu/;
    hnhu.*              $multiTenantDir/hnhu/;
    hkpr.*              $multiTenantDir/hkpr/;
    hrhd.*              $multiTenantDir/hrhd/;
    hph.*               $multiTenantDir/hph/;
    hpechu.*            $multiTenantDir/hpechu/;
    hchu.*              $multiTenantDir/hchu/;
    kfla.*              $multiTenantDir/kfla/;
    lph.*               $multiTenantDir/lph/;
    lgl.*               $multiTenantDir/lgl/;
    mlhu.*              $multiTenantDir/mlhu/;
    nrph.*              $multiTenantDir/nrph/;
    nbpsdhu.*           $multiTenantDir/nbpsdhu/;
    nwhu.*              $multiTenantDir/nwhu/;
    oph.*               $multiTenantDir/oph/;
    ocph.*              $multiTenantDir/ocph/;
    peel.*              $multiTenantDir/peel/;
    pdhu.*              $multiTenantDir/pdhu/;
    pcchu.*             $multiTenantDir/pcchu/;
    po.*                $multiTenantDir/po/;
    rowph.*             $multiTenantDir/rowph/;
    re.*                $multiTenantDir/re/;
    smdhu.*             $multiTenantDir/smdhu/;
    sdhu.*              $multiTenantDir/sdhu/;
    tbdhu.*             $multiTenantDir/tbdhu/;
    timhu.*             $multiTenantDir/timhu/;
    tph.*               $multiTenantDir/tph/;
    wdgph.*             $multiTenantDir/wdgph/;
    wechu.*             $multiTenantDir/wechu/;
    yrphu.*             $multiTenantDir/yrphu/;
  }

  map $host $enablePhu {
    default   1;
  }

  map $http_host $validPhu {
     hostnames;

     default            0;
     xxsupportphu1.*    $enablePhu;
     aph.*              $enablePhu;
     bchu.*             $enablePhu;
     ckphu.*            $enablePhu;
     drhd.*             $enablePhu;
     eohu.*             $enablePhu;
     esthu.*            $enablePhu;
     gbhu.*             $enablePhu;
     hnhu.*             $enablePhu;
     hkpr.*             $enablePhu;
     hrhd.*             $enablePhu;
     hph.*              $enablePhu;
     hpechu.*           $enablePhu;
     hchu.*             $enablePhu;
     kfla.*             $enablePhu;
     lph.*              $enablePhu;
     lgl.*              $enablePhu;
     mlhu.*             $enablePhu;
     nrph.*             $enablePhu;
     nbpsdhu.*          $enablePhu;
     nwhu.*             $enablePhu;
     oph.*              $enablePhu;
     ocph.*             $enablePhu;
     peel.*             $enablePhu;
     pdhu.*             $enablePhu;
     pcchu.*            $enablePhu;
     po.*               $enablePhu;
     rowph.*            $enablePhu;
     re.*               $enablePhu;
     smdhu.*            $enablePhu;
     sdhu.*             $enablePhu;
     tbdhu.*            $enablePhu;
     timhu.*            $enablePhu;
     tph.*              $enablePhu;
     wdgph.*            $enablePhu;
     wechu.*            $enablePhu;
     yrphu.*            $enablePhu;
   }

   map $host $ssiCustom {
       default    phu/nojs;
   }

  server {
    listen <%= ENV["PORT"] %>;
    server_name localhost;

    <% if ENV["FORCE_HTTPS"] %>
      if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
      }

      # add Strict-Transport-Security to prevent man in the middle attacks
      add_header Strict-Transport-Security "max-age=31536000";
    <% end %>

    # shut down unused methods
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
      return 405;
    }

    # not allowing the application to be hosted in an iframe on another site
    add_header X-Frame-Options "SAMEORIGIN";

    #block cross-site scripting
    add_header X-XSS-Protection "1; mode=block";

    location / {

      ssi on;
      set $nojs $ssiCustom;

      if ($validPhu = 0){
        return 404;
      }

      root $baseRootDir;

      index index.html index.htm Default.htm;
    }

    location /phu/ {

      if ($validPhu = 0){
        return 404;
      }

      alias $phuDir;
    }

    <% if ENV["ICON_SERVER"] %>
      location /api/ {

        if ($validPhu = 0){
          return 404;
        }

		add_header Cache-Control "no-store";

        proxy_pass <%= ENV["ICON_SERVER"] %>/api/;

        # Require for logging
        proxy_set_header hostname     $host;
        proxy_set_header http-referer $http_referer;
      }
    <% end %>

  <% unless File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_dotfiles")) %>
    location ~ /\. {
      deny all;
      return 404;
    }
  <% end %>
  }
}
